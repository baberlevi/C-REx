plot(result.roc, print.thres="best", print.thres.best.method="closest.topleft")
result.coords <- coords(result.roc, "best", best.method="closest.topleft", ret=c("threshold", "accuracy"))
print(result.coords)#to get threshold and accuracy
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/train.txt"),stringsAsFactors = FALSE, header=T)
train<-input[,-1]
set.seed(415)
fit <- randomForest(as.factor(group) ~ .,
data=train,
importance=TRUE,
ntree=2000,na.action=na.roughfix)
varImpPlot(fit)
test <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/test.txt"),stringsAsFactors = FALSE, header=T)
#test<-input[,-1]
Prediction <- predict(fit, test)
submit <- data.frame(Id = test$group, predict = Prediction)
predictions=as.vector(fit$votes[,2])
pred=prediction(predictions,as.factor(train$group))
perf_AUC=performance(pred,"auc") #Calculate the AUC value
AUC=perf_AUC@y.values[[1]]
perf_ROC=performance(pred,"tpr","fpr") #plot the actual ROC curve
plot(perf_ROC, main="ROC plot")
text(0.5,0.5,paste("AUC = ",format(AUC, digits=5, scientific=FALSE)))
forest.model <- train(group ~., train)
result.predicted.prob <- predict(forest.model, test, type="prob") # Prediction
result.roc <- roc(test$group, result.predicted.prob$LUAD) # Draw ROC curve.
plot(result.roc, print.thres="best", print.thres.best.method="closest.topleft")
result.coords <- coords(result.roc, "best", best.method="closest.topleft", ret=c("threshold", "accuracy"))
print(result.coords)#to get threshold and accuracy
write.table(submit, file = "/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/randomforest.txt", row.names = FALSE,quote=FALSE)
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/train.txt"),stringsAsFactors = FALSE, header=T)
train<-input[,-1]
set.seed(415)
fit <- randomForest(as.factor(group) ~ .,
data=train,
importance=TRUE,
ntree=2000,na.action=na.roughfix)
varImpPlot(fit)
test <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/test.txt"),stringsAsFactors = FALSE, header=T)
#test<-input[,-1]
Prediction <- predict(fit, test)
submit <- data.frame(Id = test$group, predict = Prediction)
write.table(submit, file = "/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/randomforest.txt", row.names = FALSE,quote=FALSE)
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/train.txt"),stringsAsFactors = FALSE, header=T)
train<-input[,-1]
set.seed(415)
fit <- randomForest(as.factor(group) ~ .,
data=train,
importance=TRUE,
ntree=2000,na.action=na.roughfix)
varImpPlot(fit)
test <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/test.txt"),stringsAsFactors = FALSE, header=T)
#test<-input[,-1]
Prediction <- predict(fit, test)
submit <- data.frame(Id = test$group, predict = Prediction)
write.table(submit, file = "/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/randomforest.txt", row.names = FALSE,quote=FALSE)
predictions=as.vector(fit$votes[,2])
pred=prediction(predictions,as.factor(train$group))
perf_AUC=performance(pred,"auc") #Calculate the AUC value
AUC=perf_AUC@y.values[[1]]
perf_ROC=performance(pred,"tpr","fpr") #plot the actual ROC curve
plot(perf_ROC, main="ROC plot")
text(0.5,0.5,paste("AUC = ",format(AUC, digits=5, scientific=FALSE)))
forest.model <- train(group ~., train)
train
library(zoo)
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/train.txt"),stringsAsFactors = FALSE, header=T)
train<-input[,-1]
set.seed(415)
na.aggregate(train)
train<-na.aggregate(train)
fit <- randomForest(as.factor(group) ~ .,
data=train,
importance=TRUE,
ntree=2000,na.action=na.roughfix)
fit <- randomForest(as.factor(group) ~ .,
data=train,
importance=TRUE,
ntree=2000)#na.action=na.roughfix)
fit <- randomForest(as.factor(group) ~ .,
data=train,
importance=TRUE,
ntree=2000)#na.action=na.roughfix)
train
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/train.txt"),stringsAsFactors = FALSE, header=T)
train<-input[,-1]
data<-train
for(i in 1:ncol(data)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
replace(data, TRUE, lapply(data, NA2mean))
replace(data, TRUE, lapply(data.frame(data), NA2mean))
head(data)
head(data)
data<-train[,-ncol(train)]
head(data)
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
replace(data, TRUE, lapply(data.frame(data), NA2mean))
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/train.txt"),stringsAsFactors = FALSE, header=T)
temp<-input[,-1]
group_col<-input[,ncol(temp)]
data<-temp[,-ncol(temp)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
replace(data, TRUE, lapply(data.frame(data), NA2mean))
data<-replace(data, TRUE, lapply(data.frame(data), NA2mean))
train<-cbind(data, group_id)
train<-cbind(data, group_col)
set.seed(415)
fit <- randomForest(as.factor(group) ~ .,
data=train,
importance=TRUE,
ntree=2000)#na.action=na.roughfix)
group_col
group_col<-data.frame(input[,ncol(temp)])
train<-cbind(data, group_col)
train
group_col
group_col<-data.frame(input[,ncol(input)])
group_col
colnames(group_col) <- c("group")
train<-cbind(data, group_col)
train
fit <- randomForest(as.factor(group) ~ .,
data=train,
importance=TRUE,
ntree=2000)#na.action=na.roughfix)
varImpPlot(fit)
test <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/test.txt"),stringsAsFactors = FALSE, header=T)
Prediction <- predict(fit, test)
submit <- data.frame(Id = test$group, predict = Prediction)
write.table(submit, file = "/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/randomforest.txt", row.names = FALSE,quote=FALSE)
varImpPlot(fit)
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/test.txt"),stringsAsFactors = FALSE, header=T)
temp<-input[,-1]
group_col<-data.frame(input[,ncol(input)])
colnames(group_col) <- c("group")
data<-temp[,-ncol(temp)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
data<-replace(data, TRUE, lapply(data.frame(data), NA2mean))
test<-cbind(data, group_col)
Prediction <- predict(fit, test)
submit <- data.frame(Id = test$group, predict = Prediction)
write.table(submit, file = "/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/randomforest.txt", row.names = FALSE,quote=FALSE)
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/train.txt"),stringsAsFactors = FALSE, header=T)
temp<-input[,-1]
group_col<-data.frame(input[,ncol(input)])
colnames(group_col) <- c("group")
data<-temp[,-ncol(temp)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
data<-replace(data, TRUE, lapply(data.frame(data), NA2mean))
train<-cbind(data, group_col)
set.seed(415)
fit <- randomForest(as.factor(group) ~ .,
data=train,
importance=TRUE,
ntree=2000)#na.action=na.roughfix)
varImpPlot(fit)
## test##
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/test.txt"),stringsAsFactors = FALSE, header=T)
temp<-input[,-1]
group_col<-data.frame(input[,ncol(input)])
colnames(group_col) <- c("group")
data<-temp[,-ncol(temp)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
data<-replace(data, TRUE, lapply(data.frame(data), NA2mean))
test<-cbind(data, group_col)
Prediction <- predict(fit, test)
submit <- data.frame(Id = test$group, predict = Prediction)
write.table(submit, file = "/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/randomforest.txt", row.names = FALSE,quote=FALSE)
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/train.txt"),stringsAsFactors = FALSE, header=T)
temp<-input[,-1]
group_col<-data.frame(input[,ncol(input)])
colnames(group_col) <- c("group")
data<-temp[,-ncol(temp)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
data<-replace(data, TRUE, lapply(data.frame(data), NA2mean))
train<-cbind(data, group_col)
set.seed(415)
fit <- randomForest(as.factor(group) ~ .,
data=train,
importance=TRUE,
ntree=2000)#na.action=na.roughfix)
varImpPlot(fit)
## test##
input <- read.table(file.path("/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/test.txt"),stringsAsFactors = FALSE, header=T)
temp<-input[,-1]
group_col<-data.frame(input[,ncol(input)])
colnames(group_col) <- c("group")
data<-temp[,-ncol(temp)]
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
data<-replace(data, TRUE, lapply(data.frame(data), NA2mean))
test<-cbind(data, group_col)
Prediction <- predict(fit, test)
submit <- data.frame(Id = test$group, predict = Prediction)
write.table(submit, file = "/Users/mhe/Desktop/G4/G4tissueclassifier/PCA/hypothesis_generator/lung_cancer/randomforest.txt", row.names = FALSE,quote=FALSE)
library(ROCR)
predictions=as.vector(fit$votes[,2])
pred=prediction(predictions,as.factor(train$group))
perf_AUC=performance(pred,"auc") #Calculate the AUC value
AUC=perf_AUC@y.values[[1]]
perf_ROC=performance(pred,"tpr","fpr") #plot the actual ROC curve
plot(perf_ROC, main="ROC plot")
text(0.5,0.5,paste("AUC = ",format(AUC, digits=5, scientific=FALSE)))
forest.model <- train(group ~., train)
result.predicted.prob <- predict(forest.model, test, type="prob") # Prediction
result.roc <- roc(test$group, result.predicted.prob$LUAD) # Draw ROC curve.
plot(result.roc, print.thres="best", print.thres.best.method="closest.topleft")
result.coords <- coords(result.roc, "best", best.method="closest.topleft", ret=c("threshold", "accuracy"))
print(result.coords)#to get threshold and accuracy
setwd("/Users/mhe/Library/Mobile Documents/com~apple~CloudDocs/COREgg")
normal<-read.csv("control_1.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_1<-subset(normal,normal[,3]=="control")
all<-rbind(control_1,control_2)
normal<-read.csv("control_2.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_2<-subset(normal,normal[,3]=="control")
all<-rbind(control_1,control_2)
control_1$id<-"control_1"
control_2$id<-"control_2"
all<-rbind(control_1,control_2)
ggplot(all,aes(log10(RNA)/normal_mean, color=id,size=5))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlim(0,1)+ylim(0,7)+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))
library("ggplot2")
ggplot(all,aes(log10(RNA)/normal_mean, color=id,size=5))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlim(0,1)+ylim(0,7)+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))
library("ggplot2")
setwd("/Users/mhe/Library/Mobile Documents/com~apple~CloudDocs/COREgg")
normal<-read.csv("control_1.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_1<-subset(normal,normal[,3]=="control")
control_1$id<-"control_1"
normal_hk<-subset(control_1,control_1[,3]=="housekeeping genes")
normal_mean_1<-mean(log(normal_hk[,2]+1))
normal<-read.csv("control_2.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_2<-subset(normal,normal[,3]=="control")
control_2$id<-"control_2"
normal_hk<-subset(control_2,control_2[,3]=="housekeeping genes")
normal_mean_2<-mean(log(normal_hk[,2]+1))
control_1$RNA_normalized<-log(sub1$RNA+1)/normal_mean_1
control_2$RNA_normalized<-log(sub2$RNA+1)/normal_mean_2
all<-rbind(control_1,control_2)
#=======================Fig 1E=======
#Normal
ggplot(all,aes(RNA_normalized,color=id)))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlim(0,1)+ylim(0,7)+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))
setwd("/Users/mhe/Library/Mobile Documents/com~apple~CloudDocs/COREgg")
normal<-read.csv("control_1.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_1<-subset(normal,normal[,3]=="control")
control_1$id<-"control_1"
normal_hk<-subset(control_1,control_1[,3]=="housekeeping genes")
normal_mean_1<-mean(log(normal_hk[,2]+1))
normal<-read.csv("control_2.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_2<-subset(normal,normal[,3]=="control")
control_2$id<-"control_2"
normal_hk<-subset(control_2,control_2[,3]=="housekeeping genes")
normal_mean_2<-mean(log(normal_hk[,2]+1))
control_1$RNA_normalized<-log(sub1$RNA+1)/normal_mean_1
control_2$RNA_normalized<-log(sub2$RNA+1)/normal_mean_2
all<-rbind(control_1,control_2)
control_1$RNA_normalized<-log(control_1$RNA+1)/normal_mean_1
control_2$RNA_normalized<-log(control_2$RNA+1)/normal_mean_2
all<-rbind(control_1,control_2)
ggplot(all,aes(RNA_normalized,color=id)))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlim(0,1)+ylim(0,7)+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))
ggplot(all,aes(RNA_normalized,color=id))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlim(0,1)+ylim(0,7)+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))
all
normal_mean_2
library("ggplot2")
setwd("/Users/mhe/Library/Mobile Documents/com~apple~CloudDocs/COREgg")
normal<-read.csv("control_1.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_1<-subset(normal,normal[,3]=="control")
control_1$id<-"control_1"
normal_hk<-subset(normal,normal[,3]=="housekeeping genes")
normal_mean_1<-mean(log(normal_hk[,2]+1))
normal<-read.csv("control_2.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_2<-subset(normal,normal[,3]=="control")
control_2$id<-"control_2"
normal_hk<-subset(normal,normal[,3]=="housekeeping genes")
normal_mean_2<-mean(log(normal_hk[,2]+1))
control_1$RNA_normalized<-log(control_1$RNA+1)/normal_mean_1
control_2$RNA_normalized<-log(control_2$RNA+1)/normal_mean_2
all<-rbind(control_1,control_2)
all
ggplot(all,aes(RNA_normalized,color=id))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlim(0,1)+ylim(0,7)+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))
ggplot(all,aes(RNA_normalized,color=id))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))
library("ggplot2")
setwd("/Users/mhe/Library/Mobile Documents/com~apple~CloudDocs/COREgg")
normal<-read.csv("control_1_gramene.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_1<-subset(normal,normal[,3]=="control")
control_1$id<-"control_1"
normal_hk<-subset(normal,normal[,3]=="housekeeping genes")
normal_mean_1<-mean(log(normal_hk[,2]+1))
normal<-read.csv("control_2_gramene.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_2<-subset(normal,normal[,3]=="control")
control_2$id<-"control_2"
normal_hk<-subset(normal,normal[,3]=="housekeeping genes")
normal_mean_2<-mean(log(normal_hk[,2]+1))
control_1$RNA_normalized<-log(control_1$RNA+1)/normal_mean_1
control_2$RNA_normalized<-log(control_2$RNA+1)/normal_mean_2
all<-rbind(control_1,control_2)
all
#=======================Fig 1E=======
#Normal
ggplot(all,aes(RNA_normalized,color=id))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))
rsconnect::setAccountInfo(name='mheisu',
token='EA25F6E279A5FE6087618F4337E239DA',
secret='CFmChCTTalb2qUv2dFs93OSlTN++I8hvlOaeKhsn')
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
library(rsconnect)
deployApp()
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
library("ggplot2")
setwd("/Users/mhe/Library/Mobile Documents/com~apple~CloudDocs/COREgg")
normal<-read.csv("control_1_gramene.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_1<-subset(normal,normal[,3]=="control")
control_1$id<-"control_1"
normal_hk<-subset(normal,normal[,3]=="housekeeping genes")
normal_mean_1<-mean(log(normal_hk[,2]+1))
normal<-read.csv("control_2_gramene.csv", header=F)
colnames(normal) <- c("gene","RNA","group")
control_2<-subset(normal,normal[,3]=="control")
control_2$id<-"control_2"
normal_hk<-subset(normal,normal[,3]=="housekeeping genes")
normal_mean_2<-mean(log(normal_hk[,2]+1))
control_1$RNA_normalized<-log(control_1$RNA+1)/normal_mean_1
control_2$RNA_normalized<-log(control_2$RNA+1)/normal_mean_2
all<-rbind(control_1,control_2)
all
#=======================Fig 1E=======
#Normal
ggplot(all,aes(RNA_normalized,color=id))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))+
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
library(rsconnect)
rsconnect::setAccountInfo(name='mheisu',
token='EA25F6E279A5FE6087618F4337E239DA',
secret='CFmChCTTalb2qUv2dFs93OSlTN++I8hvlOaeKhsn')
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
ggplot(all,aes(RNA_normalized,color=id))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))+
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 1))
ggplot(all,aes(RNA_normalized,color=id))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))+
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(1, 0))
ggplot(all,aes(RNA_normalized,color=id))+
geom_density(alpha=0.5)+theme(axis.text=element_text(size=38),axis.title=element_text(size=34))+
theme(panel.background = element_blank(),panel.grid.minor =element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1.5),
legend.title = element_blank(),legend.text = element_blank())+
xlab("RNA expression level")+ylab("Percentage of genes %")+
scale_color_manual(values = c("control_1"="blue",
"control_2"="purple"
))+
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
library("ggplot2")
setwd("/Users/mhe/Desktop/G4/G4tissueclassifier/TF")
normal<-read.csv("hsf_vs_all_tf_normal.R", header=F)
colnames(normal) <- c("gene","RNA","group")
normal_hsf<-subset(normal,normal[,3]=="HSF TF family genes")
normal_hspbind<-subset(normal,normal[,3]=="Heat shock protein bind")
normal_hk<-subset(normal,normal[,3]=="housekeeping genes")
normal_tf<-subset(normal,normal[,3]=="other TF family genes")
normal_hsp1<-subset(normal,normal[,3]=="Heat shock protein 1")
normal_hsp2<-subset(normal,normal[,3]=="Heat shock protein 2")
normal_hsp3<-subset(normal,normal[,3]=="Heat shock protein 3")
normal_hsp<-rbind(normal_hsp1,normal_hsp2,normal_hsp3)
nrow(normal_hsp1)
nrow(heat_hsp1)
heat<-read.csv("hsf_vs_all_tf.R", header=F)
colnames(heat) <- c("gene","RNA","group")
heat_hsf<-subset(heat,heat[,3]=="HSF TF family genes")
heat_tf<-subset(heat,heat[,3]=="other TF family genes")
heat_hk<-subset(heat,heat[,3]=="housekeeping genes")
heat_hsp1<-subset(heat,heat[,3]=="Heat shock protein 1")
heat_hsp2<-subset(heat,heat[,3]=="Heat shock protein 2")
heat_hsp3<-subset(heat,heat[,3]=="Heat shock protein 3")
heat_hsp<-rbind(heat_hsp1,heat_hsp2,heat_hsp3)
nrow(heat_hsf)
nrow(normal_hsf)
qqnorm(log(normal_hsf[,2]+1))
qqline(log(normal_hsf[,2]+1))
qqnorm(log(heat_hsf[,2]+1))
qqline(log(heat_hsf[,2]+1))
library(rsconnect)
rsconnect::setAccountInfo(name='mheisu',
token='EA25F6E279A5FE6087618F4337E239DA',
secret='CFmChCTTalb2qUv2dFs93OSlTN++I8hvlOaeKhsn')
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
setwd('/Users/mhe/Google drive/shiny_03_16_18')
deployApp()
deployApp()
setwd('/Users/mhe/Google drive/shiny_03_16_18')
setwd('/Users/mhe/Google drive/Research/shiny')
deployApp()
